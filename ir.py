#
# Class for Infra Red distance sensor SHARP 2Y0A21xx and ADC (in this case MCP3008)
# I highly reccomend placing a large capacitor (eg 2200uF) across VIN and GND
# to reduce the significant amount of noise generated by the sensor
#

import spidev

class IR:

	def __init__(self, bus=0, device=1, adc_channel=0):
		self.inp = spidev.SpiDev()
		self.bus=bus
		self.device=device
		self.adc_channel=adc_channel
		self.inp.open(bus, device)

	def get_val(self):   #read analogue value from ADC (MCP3008)
		r = self.inp.xfer2([1,(8+self.adc_channel)<<4,0])
		v = ((r[1]&3) << 8) + r[2]
		return v

	def get_dist(self, reads=10):  #Get average of several values for accuracy
		r = []
		for i in range (0,reads):
			r.append(self.get_val())
		a = sum(r)/float(reads)
		v = (a/1023.0)*3.3
		# Distance/voltage relation is approximated to y = 27.4687 * x ^ -1.20674
		# This gives a minimum accuracy of +/- 0.5cm
		d = 27.469 * pow(v, -1.2067)
		cm = int(round(d))
		return cm

